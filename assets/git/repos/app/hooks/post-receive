#!/usr/bin/env bash

# Include strict mode & functions.

. /bootstrap/assets/bash/strict-mode;
. /bootstrap/assets/bash/functions;

# Trap errors and recover gracefully.

trap auto-disable-app-maintenance-mode-on-error ERR;

# Deploy app when master branch is pushed to repo.

while read -r _oldrev _newrev _refname; do

  _branch="$(git --git-dir=/repos/app.git \
    rev-parse --symbolic --abbrev-ref "${_refname}")";

  if [[ -n "${_oldrev}" && -n "${_newrev}" && "${_branch}" == master ]]; then

    enable-app-maintenance-mode; # Temporarily.

    cd /app; # Move into the `/app` directory for deployment.

    git --git-dir=/repos/app.git --work-tree=/app checkout --force;
    echo 'Deployed master branch to `/app` directory.';

    git --git-dir=/repos/app.git --work-tree=/app submodule init;
    git --git-dir=/repos/app.git --work-tree=/app submodule update;
    echo 'Updated submodules in the `/app` directory.';

    if [[ -f ./build.xml ]] && can-run phing; then
      phing build; # Runs the build routine.
      echo 'Ran `phing build` in the `/app` directory.'; fi;

    if [[ -x ./.post-receive ]]; then
      ./.post-receive; # Custom post-receive hook.
      echo 'Ran `.post-receive` in the `/app` directory.'; fi;

    disable-app-maintenance-mode; # Restore.
  fi;

done; unset _oldrev; unset _newrev; unset _refname;
