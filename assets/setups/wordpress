#!/usr/bin/env bash

if can_run php && [[ "${CFG_INSTALL_WORDPRESS}" == 1 ]]; then

  # Clone the WordPress master branch.

  curl http://wordpress.org/latest.zip \
     --output /tmp/wordpress-latest.zip --location;
  unzip -qq -d /tmp/wordpress-latest /tmp/wordpress-latest.zip;
  cp --force --recursive /tmp/wordpress-latest/wordpress/. /app/src;

  rm --force --recursive /tmp/wordpress-latest;
  rm /tmp/wordpress-latest.zip;

  # Set permissions for files in the app directory.

  find /app -type d -exec chmod 775 {} \;
  find /app -type f -exec chmod 664 {} \;

  # Setup the `/wp-config.php` file with auto-generated security keys.

  ln --symbolic /bootstrap/assets/wordpress/.wp-config.php /app/src/wp-config.php;
  perl -i -wpe 's/%%AUTH_KEY%%/'"$(esc_regex_rv "$(keygen 64)")"'/u' /bootstrap/assets/wordpress/.wp-config.php;
  perl -i -wpe 's/%%SECURE_AUTH_KEY%%/'"$(esc_regex_rv "$(keygen 64)")"'/u' /bootstrap/assets/wordpress/.wp-config.php;
  perl -i -wpe 's/%%LOGGED_IN_KEY%%/'"$(esc_regex_rv "$(keygen 64)")"'/u' /bootstrap/assets/wordpress/.wp-config.php;
  perl -i -wpe 's/%%NONCE_KEY%%/'"$(esc_regex_rv "$(keygen 64)")"'/u' /bootstrap/assets/wordpress/.wp-config.php;
  perl -i -wpe 's/%%AUTH_SALT%%/'"$(esc_regex_rv "$(keygen 64)")"'/u' /bootstrap/assets/wordpress/.wp-config.php;
  perl -i -wpe 's/%%SECURE_AUTH_SALT%%/'"$(esc_regex_rv "$(keygen 64)")"'/u' /bootstrap/assets/wordpress/.wp-config.php;
  perl -i -wpe 's/%%LOGGED_IN_SALT%%/'"$(esc_regex_rv "$(keygen 64)")"'/u' /bootstrap/assets/wordpress/.wp-config.php;
  perl -i -wpe 's/%%NONCE_SALT%%/'"$(esc_regex_rv "$(keygen 64)")"'/u' /bootstrap/assets/wordpress/.wp-config.php;

  # Build symlinks to development files when run via Vagrant.

  if is_vagrant && [[ "${CFG_INSTALL_WORDPRESS_VG_SYMLINKS}" == 1 ]]; then

    # Create theme/plugin symlinks if possible.

    for _wp_dir in /wordpress /wp-personal /wp-business; do

    	# Create theme symlinks if possible.

    	if [[ -d "${_wp_dir}"/themes ]]; then
    		for _dir in "${_wp_dir}"/themes/*; do
    			rm --force /app/src/wp-content/themes/"$(basename "${_dir}")";

    			if [[ -d "${_dir}"/"$(basename "${_dir}")" ]]; then
    				ln --symbolic --no-target-directory "${_dir}"/"$(basename "${_dir}")" /app/src/wp-content/themes/"$(basename "${_dir}")";
    			elif [[ -d "${_dir}" ]]; then # Not in a nested sub-directory; i.e., this is the theme directory?
    				ln --symbolic --no-target-directory "${_dir}" /app/src/wp-content/themes/"$(basename "${_dir}")";
    			fi;
    		done; unset _dir;
    	fi;
    	# Create plugin symlinks if possible.

    	if [[ -d "${_wp_dir}"/plugins ]]; then
    		for _dir in "${_wp_dir}"/plugins/*; do
    			rm --force /app/src/wp-content/plugins/"$(basename "${_dir}")";

    			if [[ -d "${_dir}"/"$(basename "${_dir}")" ]]; then
    				ln --symbolic --no-target-directory "${_dir}"/"$(basename "${_dir}")" /app/src/wp-content/plugins/"$(basename "${_dir}")";
    			elif [[ -d "${_dir}" ]]; then # Not in a nested sub-directory; i.e., this is the plugin directory?
    				ln --symbolic --no-target-directory "${_dir}" /app/src/wp-content/plugins/"$(basename "${_dir}")";
    			fi;
    		done; unset _dir;
    	fi;

    done; unset _wp_dir; # End WordPress symlinks.

  else echo 'Skipping WP symlinks.'; fi;

else echo 'Skipping WordPress installation.'; fi;
