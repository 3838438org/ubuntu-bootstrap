#!/usr/bin/env bash

# Include strict mode & functions.

. /bootstrap/src/bash/strict-mode;
. /bootstrap/src/bash/functions;

# Trap errors & warn the user if an error occurs.

trap auto-warn-about-app-maintenance-mode-on-error ERR;

# Deploy app when master branch is pushed to repo.

while read -r _oldrev _newrev _refname; do

  _branch="$(git --git-dir=/repos/app.git \
    rev-parse --symbolic --abbrev-ref "${_refname}")";

  if [[ -n "${_oldrev}" && -n "${_newrev}" && "${_branch}" == master ]]; then

    enable-app-maintenance-mode; # Temporarily.

    cd /app; # Move to `/app` directory.
    GIT_DIR=/repos/app.git; GIT_WORK_TREE=/app;

    git checkout --force; # Throw away local changes.
    echo 'Deployed master branch to `/app` directory.';

    git submodule init; git submodule update;
    echo 'Updated submodules in the `/app` directory.';

    if [[ -f /etc/git-crypt.app.key ]] && can-run git-crypt; then
      git crypt unlock /etc/git-crypt.app.key;
      echo 'Ran `git-crypt unlock` in the `/app` directory.'; fi;

    if [[ -f ./build.xml ]] && can-run phing; then
      phing post-receive-build; # Runs the build routine.
      echo 'Ran `phing build` in the `/app` directory.'; fi;

    if [[ -x ./post-receive ]]; then
      ./post-receive; # Custom post-receive hook.
      echo 'Ran `post-receive` in the `/app` directory.'; fi;

    disable-app-maintenance-mode; # Restore.
  fi;

done; unset _oldrev; unset _newrev; unset _refname;
