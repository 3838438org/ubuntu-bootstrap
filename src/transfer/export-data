#!/usr/bin/env bash

# Running as root?

if [[ "$(whoami)" != 'root' ]]; then
  echo 'Please run w/ `sudo`.'; exit 1; fi;

# Include strict mode & functions.

. /bootstrap/src/bash/strict-mode;
. /bootstrap/src/bash/functions;

# Installation must have completed already.

if [[ ! -f /bootstrap/.installed-version ]]; then
  echo 'Installation incomplete. Not yet possible.';
  exit 1; # Failure status.
fi;
# Export data and upload via transfer.sh.

cd /; # Move to drive base.

data_to_export='/app';

if [[ -d /repos ]]; then
  data_to_export+=' /repos';
fi;
if [[ -d /etc/bootstrap/ssl ]]; then
  data_to_export+=' /etc/bootstrap/ssl';
fi;
if [[ -d /etc/bootstrap/openvpn ]]; then
  data_to_export+=' /etc/bootstrap/openvpn';
fi;
if [[ -f /etc/git-crypt.app.key ]]; then
  data_to_export+=' /etc/git-crypt.app.key';
fi;
if can-run mysql; then # Export all databases, except `mysql` and schema tables.
  echo 'SHOW DATABASES' | mysql --user=root --password="${CFG_MYSQL_DB_PASSWORD}" --skip-column-names \
    | grep --perl-regexp --invert-match '^(?:(?:information|performance)_schema|mysql)$' \
    | xargs mysqldump --user=root --password="${CFG_MYSQL_DB_PASSWORD}" --databases > /tmp/exported-data.sql;

  if [[ -f /tmp/exported-data.sql ]]; then
    data_to_export+=' /tmp/exported-data.sql';
  fi;
fi;
tar \
  --verbose \
  --create --gzip \
  --absolute-names \
  --dereference \
  --hard-dereference \
  --preserve-permissions \
  --file=/tmp/exported-data.tar.gz \
  \
  ${data_to_export};

sharefile /tmp/exported-data.tar.gz symmetric;

rm --force /tmp/exported-data.*; # Cleanup temporary files.
