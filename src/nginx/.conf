# ----------------------------------------------------------------------------------------------------------------------

# General (main context).

pid /run/nginx.pid;
user www-data www-data;
worker_processes auto;

events {
  worker_connections 768;
}

# ----------------------------------------------------------------------------------------------------------------------

# Web server (http context).

http {
  # Performance.

  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;

  # DNS resolution.

  resolver_timeout 5s;
  resolver 8.8.8.8 8.8.4.4;

  # Buffer tweaks.

  client_max_body_size 10m;
  client_body_buffer_size 10k;
  client_header_buffer_size 1k;
  large_client_header_buffers 2 1k;

  # Reasonable timeouts.

  client_body_timeout 10s;
  client_header_timeout 10s;
  keepalive_timeout 15s 15s;
  send_timeout 10s;

  # Open file cache.

  open_file_cache max=5000 inactive=30s;
  open_file_cache_valid 30s;
  open_file_cache_min_uses 2;
  open_file_cache_errors on;

  # Log file settings.

  access_log /var/log/nginx/access.log;
  error_log /var/log/nginx/error.log crit;

  # Directory indexing.

  index index.php index.html;

  # Client-side cache.

  expires 7d;
  if_modified_since before;
  etag on; # See: <http://jas.xyz/1MzvnWz>

  # GZIP compresion.

  gzip on;
  gzip_vary on;
  gzip_comp_level 6;
  gzip_types text/plain text/xml image/svg+xml # text/html in core already.
    application/rss+xml application/atom+xml application/xhtml+xml
    text/css application/json application/x-javascript
    application/font-otf application/font-ttf;

  # Configure several MIME types.

  types {
    text/xml xml;
    text/plain txt md;
    text/html html htm;

    application/rss+xml rss;
    application/atom+xml atom;
    application/xhtml+xml xhtml;

    text/css css;
    application/json json;
    application/x-javascript js;

    image/gif gif;
    image/png png;
    image/x-icon ico;
    image/x-ms-bmp bmp;
    image/tiff tif tiff;
    image/svg+xml svg svgz;
    application/postscript ai eps;
    image/jpeg jpg jpeg jpe;

    audio/mpeg mp3;
    audio/ogg ogg;
    audio/midi mid midi;

    video/mp4 mp4;
    video/x-flv flv;
    video/webm webm;
    video/x-ms-wmv wmv;
    video/x-msvideo avi;
    video/quicktime mov;
    video/mpeg mpeg mpg;
    application/x-shockwave-flash swf;

    application/font-otf otf;
    application/font-ttf ttf;
    application/font-woff woff woff2;
    application/vnd.ms-fontobject eot;

    application/x-x509-ca-cert crt pem;

    application/zip zip;
    application/gzip gz;
    application/x-gtar tgz;
    application/x-httpd-php phar;
    application/x-7z-compressed 7z;
    application/x-rar-compressed rar;
    application/java-archive jar war ear;

    application/x-redhat-package-manager rpm;
    application/octet-stream deb dmg exe msi dll;

    application/pdf pdf;
    application/rtf rtf;
    application/msword doc;
    application/vnd.ms-excel xls;
    application/vnd.ms-powerpoint ppt;
    application/vnd.openxmlformats-officedocument.spreadsheetml.sheet xlsx;
    application/vnd.openxmlformats-officedocument.wordprocessingml.document docx;
    application/vnd.openxmlformats-officedocument.presentationml.presentation pptx;
  }
  default_type application/octet-stream;

  # Prevent MIME sniffing. See: <http://jas.xyz/1kVvF41>

  add_header x-content-type-options nosniff always;

# ----------------------------------------------------------------------------------------------------------------------

  # HTTP (server context).

  server {
    # Any.

    server_name _;

    # HTTP & SSL over HTTPS/2.

    listen 80 default_server;
    listen [::]:80 default_server;

    # Force HTTPS at all times.

    return 301 https://$host$request_uri;
  }

# ----------------------------------------------------------------------------------------------------------------------

  # HTTPS (server context; primary default).

  server {
    # Any.

    server_name _;

    # Doc root.

    root /app/src;

    # SSL over HTTPS/2.

    listen 443 default_server ssl http2;
    listen [::]:443 default_server ssl http2;

    # Force no `www.` prefix.

    if ($host ~* ^www\.(.*)) {
      return 301 $scheme://$1$request_uri;
    }

    # Security considerations.

    if ($uri ~* /\.) {
      return 403;
    }
    if ($uri ~* ~(?:/|$)) {
      return 403;
    }
    if ($uri ~* /xmlrpc\.php$) {
      return 403;
    }
    if ($uri ~* /phpinfo\.php$) {
      return 403;
    }
    if ($uri ~* \bconfig(?:\.inc)?\.php$) {
      return 403;
    }
    if ($uri ~* \.(?:bak|copy|log|old|tmp)$) {
      return 403;
    }
    if ($uri ~* /(?:uploads|files)/.*?\.php$) {
      return 403;
    }
    if ($uri ~* /(?:includes|vendor)/.*?\.php$) {
      return 403;
    }
    if ($uri ~* /(?:mu\-plugins)/.*?\.php$) {
      return 403;
    }
    if ($request_uri ~* ^/errors/[^/]+(?:/index\.html?|/)?(?:[?&]|$)) {
      return 403; # Disallow direct access to error pages.
    }
    if ($request_uri ~* ^/coming\-soon(?:/index\.html?|/)?(?:[?&]|$)) {
      return 403; # Disallow direct access to coming soon pages.
    }

    # Maintenance detection.

    set $maintenance off; # Initialize.

    if (-f /app/.maintenance) {
      set $maintenance on;
    }
    if (-f /app/.~maintenance) {
      set $maintenance on;
    }
    if ($request_uri ~* ^/errors/503(?:[/?&]|$)) {
      set $maintenance allow_503_access;
    }
    if ($maintenance = on) {
      return 503;
    }

    ## Error handlers.

    error_page 503 @errors-503;
    error_page 404 @errors-404;

# ----------------------------------------------------------------------------------------------------------------------

    # Locations (same server context).

    ## Adminisrative tools.

    location ^~ /tools/ {
      root /bootstrap/src;

      auth_basic 'Administrative Tools';
      auth_basic_user_file /etc/bootstrap/passwds/.tools;

      location = /tools/status.nginx {
        stub_status yes; # Status page.
      }
      location ~* \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/var/run/php-fpm.sock;
      }
      location ~* \.(?:otf|ttf|woff|woff2|eot)$ {
        add_header access-control-allow-origin '*';
      }
    }
    ## Error locations.

    location @errors-503 {
      expires -1; # No cache.
      add_header retry-after 300;
      rewrite ^ /errors/503/index.html last;
    }
    location @errors-404 {
      rewrite ^ /errors/404/index.html last;
    }
    location ~* ^/errors/(?<error_code>[0-9]+)/ {
      # Allows for static /errors/<error_code>/ resources.
      root /bootstrap/src/html/errors/$error_code/default;

      rewrite ^/errors/[0-9]+(.*) $1 break;

      location ~* \.(?:otf|ttf|woff|woff2|eot)$ {
        add_header access-control-allow-origin '*';
      }
    }
    ## Coming soon locations.

    location ~* ^/coming\-soon/ {
      # Allows for static /coming-soon/ resources.
      root /bootstrap/src/html/coming-soon/default;

      rewrite ^/coming-soon(.*) $1 break;

      location ~* \.(?:otf|ttf|woff|woff2|eot)$ {
        add_header access-control-allow-origin '*';
      }
    }
    ## Known static file extensions (we can save some time here).

    location ~* \.(?:xml|txt|md|html|htm|rss|atom|xhtml|css|json|js|gif|png|ico|bmp|tif|tiff|svg|svgz|ai|eps|jpg|jpeg|jpe|mp3|ogg|mid|midi|mp4|flv|webm|wmv|avi|mov|mpeg|mpg|swf|otf|ttf|woff|woff2|eot|crt|pem|zip|gz|tgz|phar|7z|rar|jar|war|ear|rpm|deb|dmg|exe|msi|dll|pdf|rtf|doc|xls|ppt|xlsx|docx|pptx)$ {
      # This is so we don't pass as many 404 errors to PHP for processing.
      location ~* \.(?:otf|ttf|woff|woff2|eot)$ {
        add_header access-control-allow-origin '*';
      }
    }
    ## PHP file extension (explicitly).

    location ~* \.php$ {
      include snippets/fastcgi-php.conf;
      fastcgi_pass unix:/var/run/php-fpm.sock;
    }

    ## Everything else (PHP fallback).

    location / {
      try_files $uri $uri/ /index.php?$args;
    }

# ----------------------------------------------------------------------------------------------------------------------

    # SSL config (same server context).

    ssl_stapling on;
    ssl_stapling_verify on;

    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off; # <http://jas.xyz/1O8Rs27>

    ssl_certificate_key /etc/bootstrap/ssl/official-private-key.pem;
    ssl_certificate /etc/bootstrap/ssl/official-fullchain.pem;
    ssl_trusted_certificate /etc/bootstrap/ssl/official-fullchain.pem;
    ssl_dhparam /etc/bootstrap/ssl/dhparam.pem;

    ssl_prefer_server_ciphers on; # Prefer our cipher suite order.
    ssl_protocols TLSv1.1 TLSv1.2; # Limit to these SSL protocols only.
    add_header strict-transport-security 'max-age=31536000; includeSubdomains; preload' always;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';
    # See: <https://mozilla.github.io/server-side-tls/ssl-config-generator/>. See also: <https://cipherli.st/>
  }
# ----------------------------------------------------------------------------------------------------------------------

  # Includes (http context).

  include /etc/nginx/conf.d/*.conf;
  include /etc/nginx/sites-enabled/*;
}
