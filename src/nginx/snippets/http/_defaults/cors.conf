# CORS headers.

map $uri $_access_control_allow_any_origin {
  default '';
  ~*\.(?:otf|ttf|woff|woff2|eot)$ '*';
}
map $host $_access_control_allow_origin {
  default $_access_control_allow_any_origin;
  ~*^(?:cors|api)\. $http_origin;
}
map $host $_access_control_allow_credentials {
  default '';
  ~*^(?:cors|api)\. 'true';
}
map $host $_access_control_allow_methods {
  default '';
  ~*^(?:cors|api)\. 'GET, POST, PUT, PATCH, DELETE, OPTIONS';
}
map $host $_access_control_allow_headers {
  default '';
  ~*^(?:cors|api)\. 'upgrade-insecure-requests, x-forwarded-proto, accept,accept-encoding,accept-language, user-agent,x-requested-via,x-requested-with, x-cf-connecting-ip,x-cf-visitor,x-cluster-client-ip,x-client-ip,client-ip,x-real-ip,real-ip,x-forwarded-for,forwarded-for,x-forwarded,forwarded,via, authorization,proxy-authorization, range,if-range, if-modified-since,cache-control, content-encoding,content-type,content-length, keep-alive, dnt';
}
map $host $_access_control_expose_headers {
  default '';
  ~*^(?:cors|api)\. 'server,cf-ray,via, allow, content-security-policy,x-webkit-csp,x-frame-options, strict-transport-security,public-key-pins, referrer-policy, upgrade,location,refresh, status,retry-after, link,x-powered-by,p3p, www-authenticate,proxy-authenticate, accept-ranges,content-range, transfer-encoding,trailer, content-disposition,content-encoding,content-language,content-type,x-content-type-options,content-length, cache-control,last-modified,date,expires,warning,etag,pragma,vary';
}
add_header vary origin always; # Always.

add_header access-control-allow-origin $_access_control_allow_origin always;
add_header access-control-allow-credentials $_access_control_allow_credentials always;
add_header access-control-allow-methods $_access_control_allow_methods always;

add_header access-control-allow-headers $_access_control_allow_headers always;
add_header access-control-expose-headers $_access_control_expose_headers always;
