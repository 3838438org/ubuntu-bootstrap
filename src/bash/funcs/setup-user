#!/usr/bin/env bash

# User setup/configuration utility.

function setup-user() {
  ## Initialize.

  local user='';
  local name='';
  local email='';
  local shell='';
  local ssh_keys='';
  local home_dir='';

  ## Parse options.

  local short_options='u:n:e:s:k:';
  local long_options='user:,name:,email:,shell:,ssh-keys:';
  local options; options="$(getopt --options "${short_options}" --longoptions "${long_options}" -- "${@}")";

  eval set -- "${options}"; while true; do
     case "${1}" in
        -u|--user)
          user="${2}";
          shift 2;
          ;;
        -n|--name)
          name="${2}";
          shift 2;
          ;;
        -e|--email)
          email="${2}";
          shift 2;
          ;;
        -s|--shell)
          shell="${2}";
          shift 2;
          ;;
        -k|--ssh-keys)
          ssh_keys="${2}";
          shift 2;
          ;;
        --) shift 1; break;
          ;;
        *) echo 'Internal error.'; exit 1;
          ;;
     esac;
  done;

  if [[ -z "${name}" ]]; then
    name="${user}"; fi;

  if [[ "${user}" == root ]]; then
    home_dir=/root; # Special case.
  else home_dir=/home/"${user}"; fi;

  if [[ -z "${ssh_keys}" && -f /bootstrap/src/ssh/"${user}"/authorized_keys ]]; then
    ssh_keys=/bootstrap/src/ssh/"${user}"/authorized_keys; fi;

  ## Validate options.

  if [[ -z "${user}" ]]; then
    return 1; # Missing.

  elif ! user-exists "${user}"; then
    return 1; # Missing.

  elif [[ -z "${name}" ]]; then
    return 1; # Missing.

  elif [[ -z "${email}" ]]; then
    return 1; # Missing.

  elif [[ ! -d "${home_dir}" ]]; then
    return 1; # Missing.
  fi;
  ## Set the login shell they prefer to use.

  if [[ -n "${shell}" ]]; then
    chsh --shell "${shell}" "${user}"; fi;

  ## Home directory customization.

  cp --force --recursive --preserve=mode /bootstrap/src/tpl.home/. "${home_dir}";
  find "${home_dir}" -type d ! -path "${home_dir}"'/.ssh' ! -path "${home_dir}"'/.ssh/**' -exec chmod g+w {} \;
  find "${home_dir}" -type f ! -path "${home_dir}"'/.ssh/**' -exec chmod g+w {} \;
  chown --recursive "${user}":"${user}" "${home_dir}";

  ## Setup authorized SSH keys in home directory.

  if [[ -f "${ssh_keys}" ]]; then
    mkdir --parents "${home_dir}"/.ssh;
    cp --force "${ssh_keys}" "${home_dir}"/.ssh/authorized_keys;

    chmod 700 "${home_dir}"/.ssh;
    chmod 600 "${home_dir}"/.ssh/authorized_keys;
    chown --recursive "${user}":"${user}" "${home_dir}"/.ssh;
  fi;
  ## Git configuration for this user.

  perl -i -wpe 's/^(\s*)name\s*\=.*$/$1name = '"$(esc-regex-rv "${name}")"'/u' "${home_dir}"/.gitconfig;
  perl -i -wpe 's/^(\s*)email\s*\=.*$/$1email = '"$(esc-regex-rv "${email}")"'/u' "${home_dir}"/.gitconfig;

  ## WP-CLI configuration for this user.

  if [[ "${user}" == 'root' || "${user}" == 'vagrant' ]]; then
    perl -i -0wpe 's/%%user%%/admin/ug' "${home_dir}"/.wp-cli/config.yml;
  else # Use this particular username in all other cases.
    perl -i -0wpe 's/%%user%%/'"$(esc-regex-rv "${user}")"'/ug' "${home_dir}"/.wp-cli/config.yml;
  fi;
  perl -i -0wpe 's/%%host%%/'"$(esc-regex-rv "${CFG_HOST}")"'/ug' "${home_dir}"/.wp-cli/config.yml;
};
