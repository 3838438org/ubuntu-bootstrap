#!/usr/bin/env bash

# User setup utility.

function setup-user() {
  # Initialize.

  local user='';
  local name='';
  local email='';
  local shell='';
  local ssh_keys='';
  local static_ip='';
  local home_dir='';

  # Parse options.

  local short_options='u:n:e:s:k:i:';
  local long_options='user:,name:,email:,shell:,ssh-keys:,static-ip:';
  local options; options="$(getopt --options "${short_options}" --longoptions "${long_options}" -- "${@}")";

  eval set -- "${options}"; while true; do
     case "${1}" in
        -u|--user)
          user="${2}";
          shift 2;
          ;;
        -n|--name)
          name="${2}";
          shift 2;
          ;;
        -e|--email)
          email="${2}";
          shift 2;
          ;;
        -s|--shell)
          shell="${2}";
          shift 2;
          ;;
        -k|--ssh-keys)
          ssh_keys="${2}";
          shift 2;
          ;;
        -i|--static-ip)
          static_ip="${2}";
          shift 2;
          ;;
        --) shift 1; break;
          ;;
        *) echo 'Internal error.'; exit 1;
          ;;
     esac;
  done;

  # Fallback on defaults.

  if [[ -z "${name}" ]]; then
    name="${user}"; fi;

  if [[ -z "${shell}" ]]; then
    shell=/bin/zsh; fi;

  if [[ -z "${ssh_keys}" && -f /bootstrap/src/ssh/"${user}"/authorized_keys ]]; then
    ssh_keys=/bootstrap/src/ssh/"${user}"/authorized_keys; fi;

  # Establish home directory.

  if [[ "${user}" == root ]]; then
    home_dir=/root; # Special case.
  else home_dir=/home/"${user}"; fi;

  # Validate options/variables.

  if [[ -z "${user}" ]]; then
    return 1; # Missing.

  elif ! user-exists "${user}"; then
    return 1; # Missing.

  elif [[ -z "${name}" ]]; then
    return 1; # Missing.

  elif [[ -z "${email}" ]]; then
    return 1; # Missing.

  elif [[ ! -d "${home_dir}" ]]; then
    return 1; # Missing.
  fi;

  # Set login shell they prefer.

  if [[ -n "${shell}" ]]; then
    chsh --shell "${shell}" "${user}"; fi;

  # Home directory customization.

  cp --force --recursive --preserve=mode /bootstrap/src/tpl.home/. "${home_dir}";
  find "${home_dir}" -type d ! -path "${home_dir}"'/.ssh' ! -path "${home_dir}"'/.ssh/**' -exec chmod g+w {} \;
  find "${home_dir}" -type f ! -path "${home_dir}"'/.ssh/**' -exec chmod g+w {} \;
  chown --recursive "${user}":"${user}" "${home_dir}";

  ## Setup authorized SSH keys in home directory.
  ## This only configures the authorized SSH key(s).
  # To use SSH it requires they be in a group with SSH access.

  if [[ -f "${ssh_keys}" ]]; then
    # Do not set authorized keys for `vagrant ssh`, which has its own key.
    # The system users on vagrant can be `vagrant` or `ubuntu` in newer builds.
    if ! is-vagrant || [[ "${user}" != 'vagrant' && "${user}" != 'ubuntu' ]]; then
      mkdir --parents "${home_dir}"/.ssh;
      cp --force "${ssh_keys}" "${home_dir}"/.ssh/authorized_keys;

      chmod 700 "${home_dir}"/.ssh;
      chmod 600 "${home_dir}"/.ssh/authorized_keys;
      chown --recursive "${user}":"${user}" "${home_dir}"/.ssh;
    fi;
  fi;
  ## Git configuration for this user.

  perl -i -wpe 's/^(\s*)name\s*\=.*$/$1name = '"$(esc-regex-rv "${name}")"'/u' "${home_dir}"/.gitconfig;
  perl -i -wpe 's/^(\s*)email\s*\=.*$/$1email = '"$(esc-regex-rv "${email}")"'/u' "${home_dir}"/.gitconfig;

  ## WP-CLI configuration for this user.

  if [[ "${user}" == 'root' ]]; then
    perl -i -0wpe 's/%%user%%/admin/ug' "${home_dir}"/.wp-cli/config.yml;
  elif is-vagrant && [[ "${user}" == 'vagrant' || "${user}" == 'ubuntu' ]]; then
    perl -i -0wpe 's/%%user%%/admin/ug' "${home_dir}"/.wp-cli/config.yml;
  else # Use this particular username in all other cases.
    perl -i -0wpe 's/%%user%%/'"$(esc-regex-rv "${user}")"'/ug' "${home_dir}"/.wp-cli/config.yml;
  fi;
  perl -i -0wpe 's/%%host%%/'"$(esc-regex-rv "${CFG_HOST}")"'/ug' "${home_dir}"/.wp-cli/config.yml;

  # Setup firewall to allow this user access.
  # This only allows the user access to the port.
  # To use SSH it requires they be in a group with SSH access.

  if [[ "${CFG_FIREWALL_ALLOWS_ADMIN_ONLY_VIA_22}" == 1 ]]; then
    if [[ -n "${static_ip}" ]] && can-run ufw; then
      ufw limit from "${static_ip}" to any port 22 proto tcp &>/dev/null;
      ufw limit from "${static_ip}" to any port 60000:61000 proto udp &>/dev/null;
      service ufw restart;
    fi;
  fi;
};
