#!/usr/bin/env bash

# Running as root?

if [[ "$(whoami)" != 'root' ]]; then
  echo 'Please run w/ `sudo`.'; exit 1; fi;

# Include strict mode & functions.

. /bootstrap/src/bash/strict-mode;
. /bootstrap/src/bash/functions;

# Trap errors & warn the user if an error occurs.

trap auto-warn-about-app-related-services-on-error ERR;

# Maybe run update routines; i.e., if installed already.

if [[ -f /bootstrap/.installed-version ]]; then

  export CFG_INSTALLED_VERSION;
  export CFG_IS_INSTALLER='0' CFG_IS_UPDATER='1';
  CFG_INSTALLED_VERSION="$(cat /bootstrap/.installed-version)";

  set -o xtrace; # Print each command that is run.

  stop-app-related-services; # Stop while updating.

  . /bootstrap/src/setups/update/repos;
  . /bootstrap/src/setups/update/vs-updates;
  . /bootstrap/src/setups/update/firewall;

  if [[ -f /bootstrap-app/src/post-update ]]; then
    . /bootstrap-app/src/post-update; fi;

  . /bootstrap/src/version.bash;
  CFG_INSTALLED_VERSION="${CFG_VERSION}";
  echo "${CFG_VERSION}" > /bootstrap/.installed-version;

  . /bootstrap/src/setups/update/cleanup;

  restart-app-related-services;

  set +o xtrace; # Turn off comand printing.

  . /bootstrap/src/setups/update/finale;

else # Provide details about why we are not updating.
  echo 'Not installed yet. Run the installer first please!'; exit 1;
fi; # End `.installed` check.
