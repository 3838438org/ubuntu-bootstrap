#!/usr/bin/env bash

# When adding a new version:
# - Update: `Vagrantfile` (add sub-domain variation).
# - Update: `.box.Vagrantfile` (add sub-domain variation).
# - Update: `/bootstrap/src/setups/php/` (add installation script).
# - Update: `/bootstrap/src/setups/config` (set default version).
# - Update: `/bootstrap/src/docker/runit/` (add startup script).

if [[ "${CFG_INSTALL_PHP_CLI}" == 1 || "${CFG_INSTALL_PHP_FPM}" == 1 ]]; then

  # Session directory.

  mkdir --parents /tmp/php/sessions;
  chmod 0777 /tmp/php/sessions;

  # Log directory.

  mkdir --parents /var/log/php;
  chmod 0777 /var/log/php;

  # Install PHP CLI and/or PHP process manager.

  if [[ -n "${CFG_INSTALL_PHP_VERSION}" ]]; then
    . /bootstrap/src/setups/php/v"${CFG_INSTALL_PHP_VERSION}";
  else . /bootstrap/src/setups/php/v7.1; fi;

  # Handle OPcache being enabled or disabled.

  if [[ "${CFG_ENABLE_PHP_OPCACHE}" == 1 ]]; then
    perl -i -wpe 's/^(\s*)opcache\.enable\s*\=.*$/$1opcache.enable = yes/u' /bootstrap/src/php/.ini;
  else perl -i -wpe 's/^(\s*)opcache\.enable\s*\=.*$/$1opcache.enable = no/u' /bootstrap/src/php/.ini; fi;

  if is-vm || is-dev; then # Revalidate OPcache on every request to avoid developer headaches.
    perl -i -wpe 's/^(\s*)opcache\.revalidate_freq\s*\=.*$/$1opcache.revalidate_freq = 0/u' /bootstrap/src/php/.ini; fi;

  # Handle XDebug being enabled or disabled.

  if [[ "${CFG_INSTALL_PHP_XDEBUG}" == 1 ]] && is-vagrant; then
    perl -i -wpe 's/^(\s*)xdebug\.remote_connect_back\s*\=.*$/$1xdebug.remote_connect_back = yes/u' /bootstrap/src/php/.ini;
  elif [[ "${CFG_INSTALL_PHP_XDEBUG}" != 1 ]]; then perl -i -wpe 's/^\s*xdebug\..*$/;$0/ug' /bootstrap/src/php/.ini; fi;

  # Handle PHAR read-only being enabled or disabled.

  if [[ "${CFG_ENABLE_PHP_PHAR_READONLY}" == 1 ]]; then
    perl -i -wpe 's/^(\s*)phar\.readonly\s*\=.*$/$1phar.readonly = yes/u' /bootstrap/src/php/.ini;
  else perl -i -wpe 's/^(\s*)phar\.readonly\s*\=.*$/$1phar.readonly = no/u' /bootstrap/src/php/.ini; fi;

  # Handle PHP assertions being enabled or disabled.

  if [[ "${CFG_ENABLE_PHP_ASSERTIONS}" == 1 ]]; then # Disable softly; i.e., allow use of assertions.
    perl -i -wpe 's/^(\s*)zend\.assertions\s*\=.*$/$1zend.assertions = 0/u' /bootstrap/src/php/.ini;
  else perl -i -wpe 's/^(\s*)zend\.assertions\s*\=.*$/$1zend.assertions = -1/u' /bootstrap/src/php/.ini; fi;

else echo 'Skipping PHP installation.'; fi;
