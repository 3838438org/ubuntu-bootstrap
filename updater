#!/usr/bin/env bash

# Sanity checks. Right location? Running as sudo?

if [[ "${BASH_SOURCE[0]}" != '/bootstrap/updater' ]]; then
  echo 'I must live in the /bootstrap directory.'; exit 1;
elif [[ "$(whoami)" != 'root' ]]; then
  echo 'Please run w/ `sudo`.'; exit 1; fi;

# Include strict mode & functions.

. /bootstrap/src/bash/strict-mode;
. /bootstrap/src/bash/functions;

# Trap errors & warn the user if an error occurs.

trap auto-warn-about-app-maintenance-mode-on-error ERR;

# Maybe run update routines; i.e., if installed already.

if [[ -f /etc/bootstrap/.installed ]]; then

  enable-app-maintenance-mode;

  export CFG_IS_INSTALLER=0;
  export CFG_IS_UPDATER=1;

  export CFG_INSTALLED_VERSION; # Read file.
  CFG_INSTALLED_VERSION="$(cat /etc/bootstrap/.installed)";

  set -o xtrace; # Print each command that is run.

  . /bootstrap/src/setups/repo-up;
  . /bootstrap/src/setups/vs-ups;

  if [[ -f /bootstrap-app/post-update ]]; then
    . /bootstrap-app/post-update; fi;

  . /bootstrap/version; # Update.
  CFG_INSTALLED_VERSION="${CFG_VERSION}";
  echo "${CFG_VERSION}" > /etc/bootstrap/.installed;

  . /bootstrap/src/setups/cleanup;

  set +o xtrace; # Turn off comand printing.

  . /bootstrap/src/setups/finale;

  disable-app-maintenance-mode;

else # Provide details about why we are not updating.
  echo 'Not installed yet. Run the installer first please!'; exit 1;
fi; # End `.installed` check.
